// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: v1/messages/showWalletResponse.message.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "wallets.v1";

export interface ShowWalletResponseMessage {
  balance: string;
  isFrozen: boolean;
  userUuid: string;
  walletUuid: string;
}

function createBaseShowWalletResponseMessage(): ShowWalletResponseMessage {
  return { balance: "", isFrozen: false, userUuid: "", walletUuid: "" };
}

export const ShowWalletResponseMessage: MessageFns<ShowWalletResponseMessage> = {
  encode(message: ShowWalletResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.balance !== "") {
      writer.uint32(10).string(message.balance);
    }
    if (message.isFrozen !== false) {
      writer.uint32(16).bool(message.isFrozen);
    }
    if (message.userUuid !== "") {
      writer.uint32(26).string(message.userUuid);
    }
    if (message.walletUuid !== "") {
      writer.uint32(34).string(message.walletUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShowWalletResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShowWalletResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.balance = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isFrozen = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userUuid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.walletUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShowWalletResponseMessage {
    return {
      balance: isSet(object.balance) ? globalThis.String(object.balance) : "",
      isFrozen: isSet(object.isFrozen) ? globalThis.Boolean(object.isFrozen) : false,
      userUuid: isSet(object.userUuid) ? globalThis.String(object.userUuid) : "",
      walletUuid: isSet(object.walletUuid) ? globalThis.String(object.walletUuid) : "",
    };
  },

  toJSON(message: ShowWalletResponseMessage): unknown {
    const obj: any = {};
    if (message.balance !== "") {
      obj.balance = message.balance;
    }
    if (message.isFrozen !== false) {
      obj.isFrozen = message.isFrozen;
    }
    if (message.userUuid !== "") {
      obj.userUuid = message.userUuid;
    }
    if (message.walletUuid !== "") {
      obj.walletUuid = message.walletUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShowWalletResponseMessage>, I>>(base?: I): ShowWalletResponseMessage {
    return ShowWalletResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShowWalletResponseMessage>, I>>(object: I): ShowWalletResponseMessage {
    const message = createBaseShowWalletResponseMessage();
    message.balance = object.balance ?? "";
    message.isFrozen = object.isFrozen ?? false;
    message.userUuid = object.userUuid ?? "";
    message.walletUuid = object.walletUuid ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
